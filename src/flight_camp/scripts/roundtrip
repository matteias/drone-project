#!/usr/bin/env python

import math
import rospy
import tf2_ros
import tf2_geometry_msgs
import numpy as np
from tf.transformations import euler_from_quaternion, quaternion_from_euler
from geometry_msgs.msg import PoseStamped
from crazyflie_driver.msg import Position


def move_to_points():

    pointsarry = np.array([[5.0, 0.0, 0.4, 0 ],
                           [5.0, 5.0, 0.4, 90],
			   [0.0, 5.0, 0.4, 180],
			   [0.0, 0.0, 0.4, 270]])

    for index in range(4):

	goal = PoseStamped()
	goal.header.frame_id = 'map'
	goal.header.stamp = rospy.Time.now()

	goal.pose.position.x = pointsarry[index, 0]
	goal.pose.position.y = pointsarry[index, 1]
	goal.pose.position.z = pointsarry[index, 2]

 	(goal.pose.orientation.x,
	goal.pose.orientation.y,
 	goal.pose.orientation.z,
	goal.pose.orientation.w) = quaternion_from_euler(math.radians(0),
                                                         math.radians(0),
                                                         math.radians(pointsarry[index, 3]) )

	pub_cmd.publish(goal)

        rospy.sleep(4.)
	if index == 2:
	    rospy.sleep(3.)
    #rospy.spin()
    

rospy.init_node('roundtrip4')
#sub_goal = rospy.Subscriber('/move_base_simple/goal', PoseStamped, goal_callback)
pub_cmd  = rospy.Publisher('/move_base_simple/goal', PoseStamped, queue_size=2)
tf_buf   = tf2_ros.Buffer()
tf_lstn  = tf2_ros.TransformListener(tf_buf)


def main():
    while not rospy.is_shutdown():
	rospy.sleep(0.5)
        move_to_points()

if __name__ == '__main__':
    main()

