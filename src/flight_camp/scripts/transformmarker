#!/usr/bin/env python

import sys
import math
import json

import rospy
import tf2_ros 
import tf2_geometry_msgs
from tf.transformations import quaternion_from_euler
from geometry_msgs.msg import TransformStamped, Vector3, PoseStamped
from crazyflie_driver.msg import Position
from aruco_msgs.msg import MarkerArray
from std_msgs.msg import UInt32MultiArray

# Current MarkerArray (global state)
all_markers = None
markerID_array = None

def callback1(markers_in):
    global all_markers
    all_markers = markers_in

#def callback2(array_in):
#    global markerID_array
#    markerID_array = array_in
	
def publish_tf(all_markers):

    #Iterate over all markers
    for marker in all_markers.markers:

        markerpose = PoseStamped()
        markerpose.header.frame_id = marker.header.frame_id
        markerpose.header.stamp = marker.header.stamp #rospy.Time.now()
        markerpose.pose = marker.pose.pose

	timeout = rospy.Duration(0.01)

        #Transformation
	if not tf_buf.can_transform(markerpose.header.frame_id, 'map', marker.header.stamp, timeout):
            rospy.logwarn_throttle(5.0, 'No transform from %s to map' % markerpose.header.frame_id)
            return

        transformed_marker = tf_buf.transform(markerpose, 'map', timeout)

	Transform = TransformStamped()
	Transform.header.frame_id = 'map'
	Transform.child_frame_id = '/aruco/detected' + str(marker.id)
	Transform.header.stamp = marker.header.stamp #rospy.Time.now()

	Transform.transform.translation.x = transformed_marker.pose.position.x
        Transform.transform.translation.y = transformed_marker.pose.position.y
        Transform.transform.translation.z = transformed_marker.pose.position.z
        Transform.transform.rotation.x = transformed_marker.pose.orientation.x
        Transform.transform.rotation.y = transformed_marker.pose.orientation.y
        Transform.transform.rotation.z = transformed_marker.pose.orientation.z
        Transform.transform.rotation.w = transformed_marker.pose.orientation.w
       
        #Broadcast
	#if marker.id in markerID_array.data:
       	broadcaster.sendTransform(Transform)


rospy.init_node('transformmarker')
ros_sub1 = rospy.Subscriber('/aruco/markers', MarkerArray, callback1)
#ros_sub2 = rospy.Subscriber('/aruco/markers_list', UInt32MultiArray, callback2) 
tf_buf   = tf2_ros.Buffer()
tf_lstn  = tf2_ros.TransformListener(tf_buf)
broadcaster = tf2_ros.TransformBroadcaster()

def main():
    rate = rospy.Rate(10)  # Hz
    while not rospy.is_shutdown():
        if all_markers:
            publish_tf(all_markers)
        rate.sleep()
    rospy.spin()

if __name__ == "__main__":
    main()

