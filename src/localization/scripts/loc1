#!/usr/bin/env python

import sys
import math
import json


import rospy
import tf2_ros 
import tf2_geometry_msgs
import numpy as np
import collections
from tf.transformations import quaternion_from_euler, euler_from_quaternion
from geometry_msgs.msg import TransformStamped, Vector3, PoseStamped, Pose
from crazyflie_driver.msg import Position
from aruco_msgs.msg import MarkerArray
from pyquaternion import Quaternion
#from std_msgs.msg import UInt32MultiArray

#current markers (global state)
all_markers = None
#markerID_array = None
last_odom = None


def callback1(markers_in):
    global all_markers
    all_markers = markers_in

def transformation_matrix(trans):
    mat = Quaternion(
        trans.rotation.w,
        trans.rotation.x,
        trans.rotation.y,
        trans.rotation.z)
    mat = mat.transformation_matrix
    mat[0][3] = trans.translation.x
    mat[1][3] = trans.translation.y
    mat[2][3] = trans.translation.z
    print("Transform_matrix success")
    return mat

def transformation(mat):
    q = Quaternion(matrix=mat)
    trans = TransformStamped()
    trans.transform.translation.x = mat[0][3]
    trans.transform.translation.y = mat[1][3]
    trans.transform.translation.z = mat[2][3]
    trans.transform.rotation.x = q[1]
    trans.transform.rotation.y = q[2]
    trans.transform.rotation.z = q[3]
    trans.transform.rotation.w = q[0]
    print("Transformation success")
    return trans

#average the transform between map and odom
def multiply_transforms(trans1, trans2):
    mat1 = transformation_matrix(trans1)
    mat2 = transformation_matrix(trans2)
    print("mutiply_transforms success")
    return transformation(np.matmul(mat1, mat2))

def publish_tf():

    global all_markers

    if not all_markers: #If no markers have been seen, create empty marker array
	all_markers = MarkerArray()
	print('No marker can be seen...')

    map_T_odom = TransformStamped()
    map_T_odom.transform.translation.x = 0	
    map_T_odom.transform.translation.y = 0
    map_T_odom.transform.translation.z = 0
    yaw = 0
	
    #Iterate over all markers
    for marker in all_markers.markers:
	print('Detecting marker...')
	
        t = TransformStamped()
        #t.header.stamp = rospy.Time.now()
        if marker.id != 0:
	    t.header.stamp = marker.header.stamp
            t.header.frame_id = 'cf1/camera_link'
            t.child_frame_id = 'aruco/detected'+str(marker.id)
            t.transform.translation.x = marker.pose.pose.position.x
            t.transform.translation.y = marker.pose.pose.position.y
            t.transform.translation.z = marker.pose.pose.position.z
            t.transform.rotation.x = marker.pose.pose.orientation.x
            t.transform.rotation.y = marker.pose.pose.orientation.y
            t.transform.rotation.z = marker.pose.pose.orientation.z
            t.transform.rotation.w = marker.pose.pose.orientation.w
	    broadcaster.sendTransform(t)

	#Get Pose of detected marker in odom-frame
	detectedmarker = 'aruco/detected' + str(marker.id)
	print(detectedmarker)
	detected_T_odom = tf_buf.lookup_transform(detectedmarker, 'cf1/odom', marker.header.stamp, rospy.Duration(0.1))

	#Get Pose of real marker in map frame
	markeratmap = 'aruco/marker' + str(marker.id)
        map_T_mapmarker = tf_buf.lookup_transform('map', markeratmap ,rospy.Time(0),rospy.Duration(0.1))


	#Calculate transform from map to odom
	#odom.position.x = map_T_mapmarker.transform.translation.x - odom_T_detected.transform.translation.x	
        #odom.position.y = map_T_mapmarker.transform.translation.y - odom_T_detected.transform.translation.y
	#(_, _, yaw) = euler_from_quaternion(( 
	#	map_T_mapmarker.transform.rotation.x - odom_T_detected.transform.rotation.x,
#		map_T_mapmarker.transform.rotation.y - odom_T_detected.transform.rotation.y,
#		map_T_mapmarker.transform.rotation.z - odom_T_detected.transform.rotation.z,
#		map_T_mapmarker.transform.rotation.w - odom_T_detected.transform.rotation.w))

	map_T_odom = multiply_transforms(map_T_mapmarker.transform, detected_T_odom.transform)
	(_, _, jaw) = euler_from_quaternion((map_T_odom.transform.rotation.x,
				map_T_odom.transform.rotation.y,
				map_T_odom.transform.rotation.z,
				map_T_odom.transform.rotation.w ))
	global last_odom
	last_odom = map_T_odom
	last_jaw = jaw
	
    all_markers = None	

    if last_odom: #if we ever saw a marker
	map_T_odom = last_odom

	#Publish flag ...

    #Publish Transform from map to cf1/odom
    Transform = TransformStamped()
    Transform.header.frame_id = 'map'
    Transform.child_frame_id = 'cf1/odom'
    Transform.header.stamp = rospy.Time.now()

    Transform.transform.translation.x = map_T_odom.transform.translation.x
    Transform.transform.translation.y = map_T_odom.transform.translation.y
    Transform.transform.translation.z = 0
    (Transform.transform.rotation.x,
     Transform.transform.rotation.y,
     Transform.transform.rotation.z,
     Transform.transform.rotation.w) = quaternion_from_euler(0, 0, yaw)
       
    #Broadcast
    broadcaster.sendTransform(Transform)
    print('_______________________')


def main():
    rospy.sleep(.5)
    rate = rospy.Rate(4)  # Hz
    while not rospy.is_shutdown():
	publish_tf()
    	rate.sleep()
    rospy.spin()


rospy.init_node('loc1')
ros_sub1 = rospy.Subscriber('/aruco/markers', MarkerArray, callback1)
#ros_sub2 = rospy.Subscriber('/aruco/markers_list', UInt32MultiArray, callback2) 
tf_buf   = tf2_ros.Buffer()
tf_lstn  = tf2_ros.TransformListener(tf_buf)
broadcaster = tf2_ros.TransformBroadcaster()


if __name__ == "__main__":
    main()

