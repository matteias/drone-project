#!/usr/bin/env python

import sys
import rospy
import json

import math
import tf
import tf2_ros
import tf2_geometry_msgs
import numpy as np
import collections

from tf.transformations import *
from geometry_msgs.msg import TransformStamped, Vector3, PoseStamped, Transform, PoseWithCovarianceStamped, PoseWithCovariance, Pose
from std_msgs.msg import Header
from aruco_msgs.msg import MarkerArray
#from crazyflie_gazebo.msg import Position
from pyquaternion import *

queue = collections.deque(maxlen = 5)
broadcaster = tf2_ros.TransformBroadcaster()
trans_average = None
id_list_sign = []
id_list_aruco = []

def transformation_matrix(trans):
    mat = Quaternion(
        trans.rotation.w,
        trans.rotation.x,
        trans.rotation.y,
        trans.rotation.z)
    mat = mat.transformation_matrix
    mat[0][3] = trans.translation.x
    mat[1][3] = trans.translation.y
    mat[2][3] = trans.translation.z
    #print("Transform_matrix success")
    return mat

def transformation(mat):
    q = Quaternion(matrix=mat)
    trans = TransformStamped()
    trans.transform.translation.x = mat[0][3]
    trans.transform.translation.y = mat[1][3]
    trans.transform.translation.z = mat[2][3]
    trans.transform.rotation.x = q[1]
    trans.transform.rotation.y = q[2]
    trans.transform.rotation.z = q[3]
    trans.transform.rotation.w = q[0]
    #print("Transformation success")
    return trans

# average the transform between map and odom
def multiply_transforms(trans1, trans2):
    mat1 = transformation_matrix(trans1)
    mat2 = transformation_matrix(trans2)
    #print("mutiply_transforms success")
    return transformation(np.matmul(mat1, mat2))

def Callback_sign(msg):
    global id_list_sign
    id_list_sign = []
    id = []
    for marker in msg.markers:
        t = TransformStamped()
        t.header.stamp = rospy.Time.now()
        if marker.id > -1:
            t.header.frame_id = 'cf1/camera_link'
            t.child_frame_id = 'perception/detected'+str(marker.id)
            t.transform.translation.x = marker.pose.pose.position.x
            t.transform.translation.y = marker.pose.pose.position.y
            t.transform.translation.z = marker.pose.pose.position.z
            t.transform.rotation.x = marker.pose.pose.orientation.x
            t.transform.rotation.y = marker.pose.pose.orientation.y
            t.transform.rotation.z = marker.pose.pose.orientation.z
            t.transform.rotation.w = marker.pose.pose.orientation.w
            broadcaster.sendTransform(t)
            id.append(marker.id)
    id_list_sign = id

def Callback_aruco(msg):
    global id_list_aruco
    id_list_aruco = []
    id = []
    for marker in msg.markers:
        t = TransformStamped()
        t.header.stamp = marker.header.stamp
        if marker.id != 0:
            t.header.frame_id = 'cf1/camera_link'
            t.child_frame_id = 'aruco/detected'+str(marker.id)
            t.transform.translation.x = marker.pose.pose.position.x
            t.transform.translation.y = marker.pose.pose.position.y
            t.transform.translation.z = marker.pose.pose.position.z
            t.transform.rotation.x = marker.pose.pose.orientation.x
            t.transform.rotation.y = marker.pose.pose.orientation.y
            t.transform.rotation.z = marker.pose.pose.orientation.z
            t.transform.rotation.w = marker.pose.pose.orientation.w
            broadcaster.sendTransform(t)
            id.append(marker.id)
    id_list_aruco = id

def compute_avg_transform():
    global trans_average
    x_avg = np.mean(np.array([transform.transform.translation.x for transform in queue]))
    y_avg = np.mean(np.array([transform.transform.translation.y for transform in queue]))
    z_avg = np.mean(np.array([transform.transform.translation.z for transform in queue]))

    quats = [ (transform.transform.rotation.x, transform.transform.rotation.y, 
	       transform.transform.rotation.z, transform.transform.rotation.w) for transform in queue]
    Q = np.transpose(np.array(quats))

    M = np.dot(Q,Q.T)

    w,v = np.linalg.eig(M)
    vec = v[:,np.argmax(w)]

    mean_quat = normalize(vec)

    tr = TransformStamped()
    tr.transform.translation.x, tr.transform.translation.y, tr.transform.translation.z = x_avg, y_avg, 0
    x, y, z, w = mean_quat[0], mean_quat[1], mean_quat[2], mean_quat[3]
    roll, pitch, yaw = euler_from_quaternion((x, y, z, w))
    (tr.transform.rotation.x,
    tr.transform.rotation.y,
    tr.transform.rotation.z,
    tr.transform.rotation.w) = quaternion_from_euler(0,0,yaw)

    trans_average = tr
    print('Average transform computed')

def normalize(v):
	norm = np.linalg.norm(v)
	if norm == 0 :
		return v
	return v / norm

#Compute trans from detected aruco marker
def aruco_localization(id):
    markeratmap = 'aruco/marker' + str(id)
    detectedmarker = 'aruco/detected' + str(id)
    trans1 = tf_buf.lookup_transform('map', markeratmap, rospy.Time.now(), rospy.Duration(0.5))
    trans2 = tf_buf.lookup_transform(detectedmarker, 'cf1/odom', rospy.Time.now(), rospy.Duration(0.5))
    trans = multiply_transforms(trans1.transform, trans2.transform)
    return trans

#Compute trans from detected traffic sign
def sign_localization(id):
    markeratmap = 'perception/sign' + str(id)
    detectedmarker = 'perception/detected' + str(id)
    trans1 = tf_buf.lookup_transform('map', markeratmap, rospy.Time.now(), rospy.Duration(0.5))
    trans2 = tf_buf.lookup_transform(detectedmarker, 'cf1/odom', rospy.Time.now(), rospy.Duration(0.5))
    trans = multiply_transforms(trans1.transform, trans2.transform)
    return trans

#Filter transformation
def filter_trans(new_trans, old_trans):
    #Calculate squared distance between new and old transform
    diff_x = new_trans.transform.translation.x - old_trans.transform.translation.x
    diff_y = new_trans.transform.translation.y - old_trans.transform.translation.y
    diff_z = new_trans.transform.translation.z - old_trans.transform.translation.z
    distance = math.sqrt( diff_x * diff_x + diff_y * diff_y + diff_z * diff_z )
    print('Distance to old transform: ' + str( distance ) )

    if distance < 0.1: 
	filt_trans = new_trans
	print('New transformation accepted')
    elif distance < 5:
	filt_trans, K = propTrans(new_trans, old_trans, distance)
	print('New transformation scaled with K = ' + str(K))
    else:
	filt_trans = old_trans #If distance is too large, ditch new transform
	print('New transformation rejected')

    return filt_trans

def propTrans(new_trans, old_trans, distance):

    if distance > 1: 
	K = 0.2 * 1/distance
    else:
	K = 0.2

    prop_trans = old_trans
    prop_trans.transform.translation.x += K * ( new_trans.transform.translation.x - old_trans.transform.translation.x )
    prop_trans.transform.translation.y += K * ( new_trans.transform.translation.y - old_trans.transform.translation.y ) 
    prop_trans.transform.translation.z += K * ( new_trans.transform.translation.z - old_trans.transform.translation.z )
    
    #print(new_trans.transform.rotation)
    old_quat = Quaternion(new_trans.transform.rotation.x,
	new_trans.transform.rotation.y,
	new_trans.transform.rotation.z,
	new_trans.transform.rotation.w)

    new_quat = Quaternion(old_trans.transform.rotation.x,
	old_trans.transform.rotation.y,
	old_trans.transform.rotation.z,
	old_trans.transform.rotation.w)

    deltaQuat = (old_quat / new_quat).elements

    _, _, yaw_delta = euler_from_quaternion((deltaQuat[0],deltaQuat[1],deltaQuat[2],deltaQuat[3]))


    _, _, yaw_old = euler_from_quaternion((old_trans.transform.rotation.x,
					   old_trans.transform.rotation.y,
					   old_trans.transform.rotation.z,
					   old_trans.transform.rotation.w))

    yaw_filt = yaw_old - K * yaw_delta

    (prop_trans.transform.rotation.x,
     prop_trans.transform.rotation.y,
     prop_trans.transform.rotation.z,
     prop_trans.transform.rotation.w) = quaternion_from_euler(0, 0, yaw_filt)

    return prop_trans, K

#Main function
def main():

    #Init node, set subscribers and listeners
    global trans_average
    global tf_buf
    rospy.init_node('loc5')
    rospy.Subscriber('/perception/sign_pose', MarkerArray, Callback_sign)
    rospy.Subscriber('/aruco/markers', MarkerArray, Callback_aruco)
    tf_buf = tf2_ros.Buffer()
    tf_lstn = tf2_ros.TransformListener(tf_buf)
    rate = rospy.Rate(2)
    found = False

    #Wait for Buffer to get transforms
    rospy.sleep(1)

    while not rospy.is_shutdown():
	print('----------------------------------------------')
	#Try to detect and find a marker
        try:
	#if 1>0:
		if not found: #If we have not seen a aruco marker yet
		    if id_list_aruco:
			for id in id_list_aruco:
			    t = aruco_localization(id)
			    print('Initial localization succesfull')
			    t.header.stamp = rospy.Time.now()
                	    t.header.frame_id = 'map'
                	    t.child_frame_id = 'cf1/odom'
                	    broadcaster.sendTransform(t)
			    found = True
			    old_transform = t
			print('Transformation send')
		    else:
			print('Waiting for aruco marker...')
		else:	#Use only traffic signs from now on
		    if id_list_sign:
			for id in id_list_sign:
			    trans = sign_localization(id)
			    queue.append(trans)
			    print('Seeing sign ' + str(id))
		        compute_avg_transform()
		        t = filter_trans(trans_average, old_transform)
                	t.header.stamp = rospy.Time.now()
                	t.header.frame_id = 'map'
                	t.child_frame_id = 'cf1/odom'
                	broadcaster.sendTransform(t)
			old_transform = t
                	print('Transformation send')
		    else:
                	old_transform.header.stamp = rospy.Time.now()
                	old_transform.header.frame_id = 'map'
                	old_transform.child_frame_id = 'cf1/odom'
                	broadcaster.sendTransform(old_transform)
			print('Not detecting any sign')

        except (tf2_ros.LookupException, tf2_ros.ConnectivityException, tf2_ros.ExtrapolationException):
	#if 0>1:
            if found:
                #old_transform = trans_average
                old_transform.header.stamp = rospy.Time.now()
                old_transform.header.frame_id = 'map'
                old_transform.child_frame_id = 'cf1/odom'
                broadcaster.sendTransform(old_transform)
		print('Not detecting any sign')
            pass

	rate.sleep()
    rospy.spin()          

if __name__ == "__main__":
    main()
